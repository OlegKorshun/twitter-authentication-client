{"version":3,"sources":["components/Header.jsx","components/Homepage.jsx","AppRouter.js","App.js","index.js"],"names":["Header","_handleSignInClick","window","open","_handleLogoutClick","props","handleNotAuthenticated","authenticated","this","className","to","onClick","Component","HomePage","state","user","error","_handleNotAuthenticated","setState","fetch","method","credentials","headers","Accept","then","response","status","json","Error","responseJson","catch","name","AppRouter","exact","path","component","App","ReactDOM","render","document","getElementById"],"mappings":"+SAIqBA,E,2MAqBnBC,mBAAqB,WAInBC,OAAOC,KAAK,qCAAsC,U,EAGpDC,mBAAqB,WAGnBF,OAAOC,KAAK,oCAAqC,SACjD,EAAKE,MAAMC,0B,wEA3BH,IACAC,EAAkBC,KAAKH,MAAvBE,cACR,OACE,wBAAIE,UAAU,QACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEDH,EACC,wBAAII,QAASH,KAAKJ,oBAAlB,UAEA,wBAAIO,QAASH,KAAKP,oBAAlB,c,GAf0BW,aCAfC,E,2MAWnBC,MAAQ,CACNC,KAAM,GACNC,MAAO,KACPT,eAAe,G,EAsDjBU,wBAA0B,WACxB,EAAKC,SAAS,CAAEX,eAAe,K,mFApDZ,IAAD,OAElBY,MAAM,2CAA4C,CAChDC,OAAQ,MACRC,YAAa,UACbC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChB,oCAAoC,KAGrCC,MAAK,SAAAC,GACJ,GAAwB,MAApBA,EAASC,OAAgB,OAAOD,EAASE,OAC7C,MAAM,IAAIC,MAAM,kCAEjBJ,MAAK,SAAAK,GACJ,EAAKX,SAAS,CACZX,eAAe,EACfQ,KAAMc,EAAad,UAGtBe,OAAM,SAAAd,GACL,EAAKE,SAAS,CACZX,eAAe,EACfS,MAAO,qC,+BAKL,IACAT,EAAkBC,KAAKM,MAAvBP,cACR,OACE,6BACE,kBAAC,EAAD,CACEA,cAAeA,EACfD,uBAAwBE,KAAKS,0BAE/B,6BACIV,EAGA,6BACE,6DACA,uCAAaC,KAAKM,MAAMC,KAAKgB,KAA7B,MAJF,8C,GAxD0BnB,a,OCAzBoB,EAAY,WACvB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,OCC1BuB,E,iLAJX,OAAO,kBAAC,EAAD,U,GAFOxB,aCElByB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4289f7fa.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\nexport default class Header extends Component {\n  static propTypes = {\n    authenticated: PropTypes.bool.isRequired\n  };\n\n  render() {\n    const { authenticated } = this.props;\n    return (\n      <ul className=\"menu\">\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        {authenticated ? (\n          <li onClick={this._handleLogoutClick}>Logout</li>\n        ) : (\n          <li onClick={this._handleSignInClick}>Login</li>\n        )}\n      </ul>\n    );\n  }\n\n  _handleSignInClick = () => {\n    // Authenticate using via passport api in the backend\n    // Open Twitter login page\n    // Upon successful login, a cookie session will be stored in the client\n    window.open(\"http://localhost:4000/auth/twitter\", \"_self\");\n  };\n\n  _handleLogoutClick = () => {\n    // Logout using Twitter passport api\n    // Set authenticated state to false in the HomePage\n    window.open(\"http://localhost:4000/auth/logout\", \"_self\");\n    this.props.handleNotAuthenticated();\n  };\n}\n","import Header from \"./Header\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\nexport default class HomePage extends Component {\n  static propTypes = {\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      profileImageUrl: PropTypes.string,\n      twitterId: PropTypes.string,\n      screenName: PropTypes.string,\n      _id: PropTypes.string\n    })\n  };\n\n  state = {\n    user: {},\n    error: null,\n    authenticated: false\n  };\n\n  componentDidMount() {\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        if (response.status === 200) return response.json();\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then(responseJson => {\n        this.setState({\n          authenticated: true,\n          user: responseJson.user\n        });\n      })\n      .catch(error => {\n        this.setState({\n          authenticated: false,\n          error: \"Failed to authenticate user\"\n        });\n      });\n  }\n\n  render() {\n    const { authenticated } = this.state;\n    return (\n      <div>\n        <Header\n          authenticated={authenticated}\n          handleNotAuthenticated={this._handleNotAuthenticated}\n        />\n        <div>\n          {!authenticated ? (\n            <h1>Welcome!</h1>\n          ) : (\n            <div>\n              <h1>You have login succcessfully!</h1>\n              <h2>Welcome {this.state.user.name}!</h2>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  _handleNotAuthenticated = () => {\n    this.setState({ authenticated: false });\n  };\n}\n","import React from \"react\";\nimport HomePage from \"./components/Homepage\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nexport const AppRouter = () => {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={HomePage} />\n      </div>\n    </Router>\n  );\n};\n","import React, { Component } from \"react\";\nimport { AppRouter } from \"./AppRouter\";\n\nclass App extends Component {\n  render() {\n    return <AppRouter />;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}